<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="406.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="389" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="389" > </text>
<g id="frames">
<g >
<title>runtime.(*mheap).alloc_m (3 samples, 1.15%)</title><rect x="137.1" y="101" width="13.6" height="15.0" fill="rgb(246,77,44)" rx="2" ry="2" />
<text  x="140.08" y="111.5" ></text>
</g>
<g >
<title>runtime.gentraceback (1 samples, 0.38%)</title><rect x="241.5" y="213" width="4.5" height="15.0" fill="rgb(216,196,52)" rx="2" ry="2" />
<text  x="244.46" y="223.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.38%)</title><rect x="590.9" y="277" width="4.6" height="15.0" fill="rgb(223,73,47)" rx="2" ry="2" />
<text  x="593.92" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (4 samples, 1.54%)</title><rect x="209.7" y="277" width="18.1" height="15.0" fill="rgb(249,17,12)" rx="2" ry="2" />
<text  x="212.69" y="287.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.38%)</title><rect x="1126.5" y="245" width="4.5" height="15.0" fill="rgb(219,111,3)" rx="2" ry="2" />
<text  x="1129.46" y="255.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.38%)</title><rect x="173.4" y="133" width="4.5" height="15.0" fill="rgb(227,228,21)" rx="2" ry="2" />
<text  x="176.38" y="143.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (11 samples, 4.23%)</title><rect x="1140.1" y="309" width="49.9" height="15.0" fill="rgb(253,40,9)" rx="2" ry="2" />
<text  x="1143.08" y="319.5" >runti..</text>
</g>
<g >
<title>runtime.(*mcentral).freeSpan (4 samples, 1.54%)</title><rect x="155.2" y="117" width="18.2" height="15.0" fill="rgb(250,174,33)" rx="2" ry="2" />
<text  x="158.23" y="127.5" ></text>
</g>
<g >
<title>runtime.notewakeup (3 samples, 1.15%)</title><rect x="604.5" y="245" width="13.7" height="15.0" fill="rgb(229,96,50)" rx="2" ry="2" />
<text  x="607.54" y="255.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 1.15%)</title><rect x="137.1" y="133" width="13.6" height="15.0" fill="rgb(241,76,35)" rx="2" ry="2" />
<text  x="140.08" y="143.5" ></text>
</g>
<g >
<title>runtime.(*treapNode).updateInvariants (1 samples, 0.38%)</title><rect x="214.2" y="149" width="4.6" height="15.0" fill="rgb(246,182,19)" rx="2" ry="2" />
<text  x="217.23" y="159.5" ></text>
</g>
<g >
<title>runtime.startm (9 samples, 3.46%)</title><rect x="550.1" y="261" width="40.8" height="15.0" fill="rgb(240,47,29)" rx="2" ry="2" />
<text  x="553.08" y="271.5" >run..</text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (10 samples, 3.85%)</title><rect x="767.9" y="229" width="45.4" height="15.0" fill="rgb(246,186,48)" rx="2" ry="2" />
<text  x="770.92" y="239.5" >runt..</text>
</g>
<g >
<title>runtime.heapBits.bits (1 samples, 0.38%)</title><rect x="255.1" y="261" width="4.5" height="15.0" fill="rgb(218,90,26)" rx="2" ry="2" />
<text  x="258.08" y="271.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.38%)</title><rect x="223.3" y="213" width="4.5" height="15.0" fill="rgb(246,80,40)" rx="2" ry="2" />
<text  x="226.31" y="223.5" ></text>
</g>
<g >
<title>net/http.serverHandler.ServeHTTP (38 samples, 14.62%)</title><rect x="14.5" y="325" width="172.5" height="15.0" fill="rgb(230,9,21)" rx="2" ry="2" />
<text  x="17.54" y="335.5" >net/http.serverHandler..</text>
</g>
<g >
<title>runtime.findrunnable (2 samples, 0.77%)</title><rect x="595.5" y="261" width="9.0" height="15.0" fill="rgb(243,12,18)" rx="2" ry="2" />
<text  x="598.46" y="271.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (6 samples, 2.31%)</title><rect x="232.4" y="341" width="27.2" height="15.0" fill="rgb(229,217,13)" rx="2" ry="2" />
<text  x="235.38" y="351.5" >r..</text>
</g>
<g >
<title>runtime.systemstack (4 samples, 1.54%)</title><rect x="209.7" y="261" width="18.1" height="15.0" fill="rgb(250,50,34)" rx="2" ry="2" />
<text  x="212.69" y="271.5" ></text>
</g>
<g >
<title>runtime.gcstopm (5 samples, 1.92%)</title><rect x="604.5" y="261" width="22.7" height="15.0" fill="rgb(213,38,14)" rx="2" ry="2" />
<text  x="607.54" y="271.5" >r..</text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.38%)</title><rect x="590.9" y="245" width="4.6" height="15.0" fill="rgb(229,200,12)" rx="2" ry="2" />
<text  x="593.92" y="255.5" ></text>
</g>
<g >
<title>runtime.runSafePointFn (9 samples, 3.46%)</title><rect x="627.2" y="261" width="40.9" height="15.0" fill="rgb(223,55,23)" rx="2" ry="2" />
<text  x="630.23" y="271.5" >run..</text>
</g>
<g >
<title>runtime.wakeScavenger (1 samples, 0.38%)</title><rect x="1135.5" y="309" width="4.6" height="15.0" fill="rgb(231,203,49)" rx="2" ry="2" />
<text  x="1138.54" y="319.5" ></text>
</g>
<g >
<title>net/http.checkConnErrorWriter.Write (1 samples, 0.38%)</title><rect x="10.0" y="293" width="4.5" height="15.0" fill="rgb(224,210,10)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (13 samples, 5.00%)</title><rect x="118.9" y="181" width="59.0" height="15.0" fill="rgb(217,118,22)" rx="2" ry="2" />
<text  x="121.92" y="191.5" >runtim..</text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.38%)</title><rect x="177.9" y="197" width="4.6" height="15.0" fill="rgb(245,117,18)" rx="2" ry="2" />
<text  x="180.92" y="207.5" ></text>
</g>
<g >
<title>runtime.wakep (3 samples, 1.15%)</title><rect x="668.1" y="261" width="13.6" height="15.0" fill="rgb(228,6,25)" rx="2" ry="2" />
<text  x="671.08" y="271.5" ></text>
</g>
<g >
<title>runtime.scanframeworker (1 samples, 0.38%)</title><rect x="241.5" y="181" width="4.5" height="15.0" fill="rgb(205,106,5)" rx="2" ry="2" />
<text  x="244.46" y="191.5" ></text>
</g>
<g >
<title>runtime.stopm (64 samples, 24.62%)</title><rect x="259.6" y="277" width="290.5" height="15.0" fill="rgb(222,116,3)" rx="2" ry="2" />
<text  x="262.62" y="287.5" >runtime.stopm</text>
</g>
<g >
<title>runtime.pthread_cond_signal (3 samples, 1.15%)</title><rect x="604.5" y="213" width="13.7" height="15.0" fill="rgb(234,55,48)" rx="2" ry="2" />
<text  x="607.54" y="223.5" ></text>
</g>
<g >
<title>runtime.pcdatavalue (1 samples, 0.38%)</title><rect x="241.5" y="149" width="4.5" height="15.0" fill="rgb(235,164,25)" rx="2" ry="2" />
<text  x="244.46" y="159.5" ></text>
</g>
<g >
<title>runtime.sysmon (12 samples, 4.62%)</title><rect x="681.7" y="309" width="54.5" height="15.0" fill="rgb(214,68,44)" rx="2" ry="2" />
<text  x="684.69" y="319.5" >runti..</text>
</g>
<g >
<title>runtime.kevent (69 samples, 26.54%)</title><rect x="813.3" y="261" width="313.2" height="15.0" fill="rgb(208,2,35)" rx="2" ry="2" />
<text  x="816.31" y="271.5" >runtime.kevent</text>
</g>
<g >
<title>runtime.(*mspan).sweep (6 samples, 2.31%)</title><rect x="205.2" y="309" width="27.2" height="15.0" fill="rgb(248,177,28)" rx="2" ry="2" />
<text  x="208.15" y="319.5" >r..</text>
</g>
<g >
<title>runtime.semasleep (64 samples, 24.62%)</title><rect x="259.6" y="245" width="290.5" height="15.0" fill="rgb(228,21,13)" rx="2" ry="2" />
<text  x="262.62" y="255.5" >runtime.semasleep</text>
</g>
<g >
<title>runtime.semawakeup (3 samples, 1.15%)</title><rect x="604.5" y="229" width="13.7" height="15.0" fill="rgb(252,171,49)" rx="2" ry="2" />
<text  x="607.54" y="239.5" ></text>
</g>
<g >
<title>runtime.mcall (74 samples, 28.46%)</title><rect x="259.6" y="341" width="335.9" height="15.0" fill="rgb(246,207,0)" rx="2" ry="2" />
<text  x="262.62" y="351.5" >runtime.mcall</text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (3 samples, 1.15%)</title><rect x="708.9" y="245" width="13.6" height="15.0" fill="rgb(207,229,29)" rx="2" ry="2" />
<text  x="711.92" y="255.5" ></text>
</g>
<g >
<title>runtime.(*treapNode).updateInvariants (1 samples, 0.38%)</title><rect x="209.7" y="133" width="4.5" height="15.0" fill="rgb(242,56,10)" rx="2" ry="2" />
<text  x="212.69" y="143.5" ></text>
</g>
<g >
<title>runtime.scanstack (1 samples, 0.38%)</title><rect x="241.5" y="229" width="4.5" height="15.0" fill="rgb(249,143,10)" rx="2" ry="2" />
<text  x="244.46" y="239.5" ></text>
</g>
<g >
<title>runtime.notewakeup (9 samples, 3.46%)</title><rect x="627.2" y="245" width="40.9" height="15.0" fill="rgb(220,77,39)" rx="2" ry="2" />
<text  x="630.23" y="255.5" >run..</text>
</g>
<g >
<title>runtime.lock (1 samples, 0.38%)</title><rect x="173.4" y="165" width="4.5" height="15.0" fill="rgb(231,223,48)" rx="2" ry="2" />
<text  x="176.38" y="175.5" ></text>
</g>
<g >
<title>net.(*conn).Write (1 samples, 0.38%)</title><rect x="10.0" y="277" width="4.5" height="15.0" fill="rgb(251,221,53)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>runtime.newMarkBits (1 samples, 0.38%)</title><rect x="227.8" y="293" width="4.6" height="15.0" fill="rgb(250,172,25)" rx="2" ry="2" />
<text  x="230.85" y="303.5" ></text>
</g>
<g >
<title>runtime.makeslice (19 samples, 7.31%)</title><rect x="100.8" y="245" width="86.2" height="15.0" fill="rgb(250,122,1)" rx="2" ry="2" />
<text  x="103.77" y="255.5" >runtime.ma..</text>
</g>
<g >
<title>runtime.gopreempt_m (19 samples, 7.31%)</title><rect x="595.5" y="309" width="86.2" height="15.0" fill="rgb(238,104,45)" rx="2" ry="2" />
<text  x="598.46" y="319.5" >runtime.go..</text>
</g>
<g >
<title>runtime.findrunnable (64 samples, 24.62%)</title><rect x="259.6" y="293" width="290.5" height="15.0" fill="rgb(243,228,8)" rx="2" ry="2" />
<text  x="262.62" y="303.5" >runtime.findrunnable</text>
</g>
<g >
<title>runtime.notesleep (64 samples, 24.62%)</title><rect x="259.6" y="261" width="290.5" height="15.0" fill="rgb(232,78,28)" rx="2" ry="2" />
<text  x="262.62" y="271.5" >runtime.notesleep</text>
</g>
<g >
<title>runtime.forEachP (10 samples, 3.85%)</title><rect x="767.9" y="293" width="45.4" height="15.0" fill="rgb(226,150,30)" rx="2" ry="2" />
<text  x="770.92" y="303.5" >runt..</text>
</g>
<g >
<title>runtime.memmove (1 samples, 0.38%)</title><rect x="177.9" y="101" width="4.6" height="15.0" fill="rgb(228,107,54)" rx="2" ry="2" />
<text  x="180.92" y="111.5" ></text>
</g>
<g >
<title>runtime.netpoll (69 samples, 26.54%)</title><rect x="813.3" y="277" width="313.2" height="15.0" fill="rgb(207,90,7)" rx="2" ry="2" />
<text  x="816.31" y="287.5" >runtime.netpoll</text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (4 samples, 1.54%)</title><rect x="155.2" y="101" width="18.2" height="15.0" fill="rgb(223,175,47)" rx="2" ry="2" />
<text  x="158.23" y="111.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (8 samples, 3.08%)</title><rect x="627.2" y="213" width="36.3" height="15.0" fill="rgb(241,208,28)" rx="2" ry="2" />
<text  x="630.23" y="223.5" >run..</text>
</g>
<g >
<title>runtime.sysUnused (3 samples, 1.15%)</title><rect x="754.3" y="261" width="13.6" height="15.0" fill="rgb(251,114,49)" rx="2" ry="2" />
<text  x="757.31" y="271.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.38%)</title><rect x="177.9" y="181" width="4.6" height="15.0" fill="rgb(242,87,10)" rx="2" ry="2" />
<text  x="180.92" y="191.5" ></text>
</g>
<g >
<title>runtime.lock (2 samples, 0.77%)</title><rect x="218.8" y="229" width="9.0" height="15.0" fill="rgb(228,170,11)" rx="2" ry="2" />
<text  x="221.77" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (4 samples, 1.54%)</title><rect x="736.2" y="309" width="18.1" height="15.0" fill="rgb(218,25,48)" rx="2" ry="2" />
<text  x="739.15" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.38%)</title><rect x="590.9" y="229" width="4.6" height="15.0" fill="rgb(225,21,20)" rx="2" ry="2" />
<text  x="593.92" y="239.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (1 samples, 0.38%)</title><rect x="1131.0" y="277" width="4.5" height="15.0" fill="rgb(214,70,9)" rx="2" ry="2" />
<text  x="1134.00" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc_m (4 samples, 1.54%)</title><rect x="736.2" y="293" width="18.1" height="15.0" fill="rgb(233,37,34)" rx="2" ry="2" />
<text  x="739.15" y="303.5" ></text>
</g>
<g >
<title>runtime.semasleep (10 samples, 3.85%)</title><rect x="767.9" y="245" width="45.4" height="15.0" fill="rgb(237,153,7)" rx="2" ry="2" />
<text  x="770.92" y="255.5" >runt..</text>
</g>
<g >
<title>runtime.notesleep (2 samples, 0.77%)</title><rect x="595.5" y="229" width="9.0" height="15.0" fill="rgb(238,39,33)" rx="2" ry="2" />
<text  x="598.46" y="239.5" ></text>
</g>
<g >
<title>runtime.resetspinning (9 samples, 3.46%)</title><rect x="550.1" y="293" width="40.8" height="15.0" fill="rgb(205,74,28)" rx="2" ry="2" />
<text  x="553.08" y="303.5" >run..</text>
</g>
<g >
<title>runtime.scanstack.func1 (1 samples, 0.38%)</title><rect x="241.5" y="197" width="4.5" height="15.0" fill="rgb(236,33,12)" rx="2" ry="2" />
<text  x="244.46" y="207.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (3 samples, 1.15%)</title><rect x="708.9" y="277" width="13.6" height="15.0" fill="rgb(218,159,53)" rx="2" ry="2" />
<text  x="711.92" y="287.5" ></text>
</g>
<g >
<title>runtime.semasleep (2 samples, 0.77%)</title><rect x="595.5" y="213" width="9.0" height="15.0" fill="rgb(240,22,54)" rx="2" ry="2" />
<text  x="598.46" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mheap).scavengeLocked (3 samples, 1.15%)</title><rect x="754.3" y="293" width="13.6" height="15.0" fill="rgb(240,202,13)" rx="2" ry="2" />
<text  x="757.31" y="303.5" ></text>
</g>
<g >
<title>runtime.systemstack (4 samples, 1.54%)</title><rect x="155.2" y="85" width="18.2" height="15.0" fill="rgb(232,139,13)" rx="2" ry="2" />
<text  x="158.23" y="95.5" ></text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.38%)</title><rect x="146.2" y="69" width="4.5" height="15.0" fill="rgb(241,204,38)" rx="2" ry="2" />
<text  x="149.15" y="79.5" ></text>
</g>
<g >
<title>runtime.(*mheap).coalesce (2 samples, 0.77%)</title><rect x="209.7" y="213" width="9.1" height="15.0" fill="rgb(231,22,53)" rx="2" ry="2" />
<text  x="212.69" y="223.5" ></text>
</g>
<g >
<title>runtime.systemstack (5 samples, 1.92%)</title><rect x="236.9" y="325" width="22.7" height="15.0" fill="rgb(214,81,4)" rx="2" ry="2" />
<text  x="239.92" y="335.5" >r..</text>
</g>
<g >
<title>runtime.madvise (4 samples, 1.54%)</title><rect x="736.2" y="245" width="18.1" height="15.0" fill="rgb(253,229,6)" rx="2" ry="2" />
<text  x="739.15" y="255.5" ></text>
</g>
<g >
<title>runtime.handoff (1 samples, 0.38%)</title><rect x="177.9" y="117" width="4.6" height="15.0" fill="rgb(207,193,31)" rx="2" ry="2" />
<text  x="180.92" y="127.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.38%)</title><rect x="590.9" y="261" width="4.6" height="15.0" fill="rgb(225,46,18)" rx="2" ry="2" />
<text  x="593.92" y="271.5" ></text>
</g>
<g >
<title>runtime.notetsleep (10 samples, 3.85%)</title><rect x="767.9" y="277" width="45.4" height="15.0" fill="rgb(211,37,18)" rx="2" ry="2" />
<text  x="770.92" y="287.5" >runt..</text>
</g>
<g >
<title>runtime.heapBits.initSpan (1 samples, 0.38%)</title><rect x="150.7" y="149" width="4.5" height="15.0" fill="rgb(241,137,30)" rx="2" ry="2" />
<text  x="153.69" y="159.5" ></text>
</g>
<g >
<title>runtime.wakep (1 samples, 0.38%)</title><rect x="1135.5" y="277" width="4.6" height="15.0" fill="rgb(227,101,39)" rx="2" ry="2" />
<text  x="1138.54" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.38%)</title><rect x="1126.5" y="213" width="4.5" height="15.0" fill="rgb(221,55,40)" rx="2" ry="2" />
<text  x="1129.46" y="223.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (9 samples, 3.46%)</title><rect x="550.1" y="213" width="40.8" height="15.0" fill="rgb(243,194,53)" rx="2" ry="2" />
<text  x="553.08" y="223.5" >run..</text>
</g>
<g >
<title>runtime.(*mheap).freeSpan.func1 (4 samples, 1.54%)</title><rect x="155.2" y="69" width="18.2" height="15.0" fill="rgb(228,13,52)" rx="2" ry="2" />
<text  x="158.23" y="79.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (8 samples, 3.08%)</title><rect x="118.9" y="165" width="36.3" height="15.0" fill="rgb(247,93,54)" rx="2" ry="2" />
<text  x="121.92" y="175.5" >run..</text>
</g>
<g >
<title>runtime.(*mheap).coalesce.func1 (2 samples, 0.77%)</title><rect x="209.7" y="197" width="9.1" height="15.0" fill="rgb(214,143,29)" rx="2" ry="2" />
<text  x="212.69" y="207.5" ></text>
</g>
<g >
<title>runtime.schedule (19 samples, 7.31%)</title><rect x="595.5" y="277" width="86.2" height="15.0" fill="rgb(234,26,9)" rx="2" ry="2" />
<text  x="598.46" y="287.5" >runtime.sc..</text>
</g>
<g >
<title>runtime.(*mheap).alloc (7 samples, 2.69%)</title><rect x="118.9" y="149" width="31.8" height="15.0" fill="rgb(217,203,21)" rx="2" ry="2" />
<text  x="121.92" y="159.5" >ru..</text>
</g>
<g >
<title>runtime.pthread_cond_wait (1 samples, 0.38%)</title><rect x="622.7" y="197" width="4.5" height="15.0" fill="rgb(208,12,41)" rx="2" ry="2" />
<text  x="625.69" y="207.5" ></text>
</g>
<g >
<title>runtime.lock (1 samples, 0.38%)</title><rect x="146.2" y="85" width="4.5" height="15.0" fill="rgb(244,101,45)" rx="2" ry="2" />
<text  x="149.15" y="95.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (3 samples, 1.15%)</title><rect x="668.1" y="197" width="13.6" height="15.0" fill="rgb(234,226,15)" rx="2" ry="2" />
<text  x="671.08" y="207.5" ></text>
</g>
<g >
<title>runtime.stopTheWorldWithSema (1 samples, 0.38%)</title><rect x="1131.0" y="309" width="4.5" height="15.0" fill="rgb(216,54,52)" rx="2" ry="2" />
<text  x="1134.00" y="319.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.38%)</title><rect x="232.4" y="325" width="4.5" height="15.0" fill="rgb(230,55,24)" rx="2" ry="2" />
<text  x="235.38" y="335.5" ></text>
</g>
<g >
<title>runtime.timerproc (12 samples, 4.62%)</title><rect x="1135.5" y="341" width="54.5" height="15.0" fill="rgb(221,188,12)" rx="2" ry="2" />
<text  x="1138.54" y="351.5" >runti..</text>
</g>
<g >
<title>syscall.write (1 samples, 0.38%)</title><rect x="10.0" y="213" width="4.5" height="15.0" fill="rgb(226,125,15)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>bufio.(*Writer).Flush (1 samples, 0.38%)</title><rect x="10.0" y="309" width="4.5" height="15.0" fill="rgb(234,225,25)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (2 samples, 0.77%)</title><rect x="209.7" y="229" width="9.1" height="15.0" fill="rgb(246,7,4)" rx="2" ry="2" />
<text  x="212.69" y="239.5" ></text>
</g>
<g >
<title>runtime.wakep (1 samples, 0.38%)</title><rect x="1126.5" y="277" width="4.5" height="15.0" fill="rgb(241,225,54)" rx="2" ry="2" />
<text  x="1129.46" y="287.5" ></text>
</g>
<g >
<title>net/http.HandlerFunc.ServeHTTP (38 samples, 14.62%)</title><rect x="14.5" y="293" width="172.5" height="15.0" fill="rgb(235,210,5)" rx="2" ry="2" />
<text  x="17.54" y="303.5" >net/http.HandlerFunc.S..</text>
</g>
<g >
<title>runtime.procyield (4 samples, 1.54%)</title><rect x="155.2" y="37" width="18.2" height="15.0" fill="rgb(240,0,4)" rx="2" ry="2" />
<text  x="158.23" y="47.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (14 samples, 5.38%)</title><rect x="114.4" y="213" width="63.5" height="15.0" fill="rgb(231,34,22)" rx="2" ry="2" />
<text  x="117.38" y="223.5" >runtim..</text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (3 samples, 1.15%)</title><rect x="137.1" y="117" width="13.6" height="15.0" fill="rgb(230,27,31)" rx="2" ry="2" />
<text  x="140.08" y="127.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (4 samples, 1.54%)</title><rect x="118.9" y="133" width="18.2" height="15.0" fill="rgb(216,211,25)" rx="2" ry="2" />
<text  x="121.92" y="143.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Write (1 samples, 0.38%)</title><rect x="10.0" y="245" width="4.5" height="15.0" fill="rgb(236,124,7)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>runtime.step (1 samples, 0.38%)</title><rect x="241.5" y="117" width="4.5" height="15.0" fill="rgb(244,197,28)" rx="2" ry="2" />
<text  x="244.46" y="127.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.38%)</title><rect x="1126.5" y="229" width="4.5" height="15.0" fill="rgb(210,169,12)" rx="2" ry="2" />
<text  x="1129.46" y="239.5" ></text>
</g>
<g >
<title>net/http.(*conn).serve (39 samples, 15.00%)</title><rect x="10.0" y="341" width="177.0" height="15.0" fill="rgb(208,104,43)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >net/http.(*conn).serve</text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (5 samples, 1.92%)</title><rect x="236.9" y="309" width="22.7" height="15.0" fill="rgb(239,33,13)" rx="2" ry="2" />
<text  x="239.92" y="319.5" >r..</text>
</g>
<g >
<title>runtime.(*mcache).refill (14 samples, 5.38%)</title><rect x="114.4" y="197" width="63.5" height="15.0" fill="rgb(245,226,5)" rx="2" ry="2" />
<text  x="117.38" y="207.5" >runtim..</text>
</g>
<g >
<title>runtime.ready (1 samples, 0.38%)</title><rect x="1126.5" y="293" width="4.5" height="15.0" fill="rgb(250,164,18)" rx="2" ry="2" />
<text  x="1129.46" y="303.5" ></text>
</g>
<g >
<title>runtime.startTheWorldWithSema (69 samples, 26.54%)</title><rect x="813.3" y="293" width="313.2" height="15.0" fill="rgb(208,127,29)" rx="2" ry="2" />
<text  x="816.31" y="303.5" >runtime.startTheWorldWithSema</text>
</g>
<g >
<title>runtime.(*mheap).setSpans (1 samples, 0.38%)</title><rect x="141.6" y="69" width="4.6" height="15.0" fill="rgb(216,175,47)" rx="2" ry="2" />
<text  x="144.62" y="79.5" ></text>
</g>
<g >
<title>runtime.newMarkBits (1 samples, 0.38%)</title><rect x="150.7" y="117" width="4.5" height="15.0" fill="rgb(252,179,35)" rx="2" ry="2" />
<text  x="153.69" y="127.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (2 samples, 0.77%)</title><rect x="595.5" y="197" width="9.0" height="15.0" fill="rgb(231,161,12)" rx="2" ry="2" />
<text  x="598.46" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpanLocked (1 samples, 0.38%)</title><rect x="141.6" y="85" width="4.6" height="15.0" fill="rgb(248,120,38)" rx="2" ry="2" />
<text  x="144.62" y="95.5" ></text>
</g>
<g >
<title>runtime.bgsweep (10 samples, 3.85%)</title><rect x="187.0" y="341" width="45.4" height="15.0" fill="rgb(227,208,24)" rx="2" ry="2" />
<text  x="190.00" y="351.5" >runt..</text>
</g>
<g >
<title>net/http.(*response).finishRequest (1 samples, 0.38%)</title><rect x="10.0" y="325" width="4.5" height="15.0" fill="rgb(205,165,18)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>runtime.semawakeup (3 samples, 1.15%)</title><rect x="668.1" y="213" width="13.6" height="15.0" fill="rgb(217,192,4)" rx="2" ry="2" />
<text  x="671.08" y="223.5" ></text>
</g>
<g >
<title>syscall.Write (1 samples, 0.38%)</title><rect x="10.0" y="229" width="4.5" height="15.0" fill="rgb(226,229,19)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (1 samples, 0.38%)</title><rect x="1126.5" y="309" width="4.5" height="15.0" fill="rgb(252,53,50)" rx="2" ry="2" />
<text  x="1129.46" y="319.5" ></text>
</g>
<g >
<title>runtime.scanobject (3 samples, 1.15%)</title><rect x="246.0" y="277" width="13.6" height="15.0" fill="rgb(225,223,7)" rx="2" ry="2" />
<text  x="249.00" y="287.5" ></text>
</g>
<g >
<title>runtime.morestack (19 samples, 7.31%)</title><rect x="595.5" y="341" width="86.2" height="15.0" fill="rgb(232,229,10)" rx="2" ry="2" />
<text  x="598.46" y="351.5" >runtime.mo..</text>
</g>
<g >
<title>runtime.notesleep (1 samples, 0.38%)</title><rect x="622.7" y="229" width="4.5" height="15.0" fill="rgb(250,75,28)" rx="2" ry="2" />
<text  x="625.69" y="239.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.38%)</title><rect x="1135.5" y="229" width="4.6" height="15.0" fill="rgb(233,2,27)" rx="2" ry="2" />
<text  x="1138.54" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mcache).prepareForSweep (1 samples, 0.38%)</title><rect x="618.2" y="213" width="4.5" height="15.0" fill="rgb(242,148,23)" rx="2" ry="2" />
<text  x="621.15" y="223.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.38%)</title><rect x="177.9" y="213" width="4.6" height="15.0" fill="rgb(254,126,36)" rx="2" ry="2" />
<text  x="180.92" y="223.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (19 samples, 7.31%)</title><rect x="595.5" y="293" width="86.2" height="15.0" fill="rgb(241,15,18)" rx="2" ry="2" />
<text  x="598.46" y="303.5" >runtime.go..</text>
</g>
<g >
<title>runtime.sweepone (10 samples, 3.85%)</title><rect x="187.0" y="325" width="45.4" height="15.0" fill="rgb(224,157,33)" rx="2" ry="2" />
<text  x="190.00" y="335.5" >runt..</text>
</g>
<g >
<title>runtime.(*gcWork).balance (1 samples, 0.38%)</title><rect x="177.9" y="133" width="4.6" height="15.0" fill="rgb(236,80,25)" rx="2" ry="2" />
<text  x="180.92" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpanLocked (4 samples, 1.54%)</title><rect x="736.2" y="277" width="18.1" height="15.0" fill="rgb(244,215,18)" rx="2" ry="2" />
<text  x="739.15" y="287.5" ></text>
</g>
<g >
<title>runtime.systemstack (88 samples, 33.85%)</title><rect x="736.2" y="325" width="399.3" height="15.0" fill="rgb(248,14,18)" rx="2" ry="2" />
<text  x="739.15" y="335.5" >runtime.systemstack</text>
</g>
<g >
<title>runtime.newAllocBits (1 samples, 0.38%)</title><rect x="150.7" y="133" width="4.5" height="15.0" fill="rgb(229,218,12)" rx="2" ry="2" />
<text  x="153.69" y="143.5" ></text>
</g>
<g >
<title>main.createFBS (38 samples, 14.62%)</title><rect x="14.5" y="277" width="172.5" height="15.0" fill="rgb(233,112,32)" rx="2" ry="2" />
<text  x="17.54" y="287.5" >main.createFBS</text>
</g>
<g >
<title>runtime.(*gcBitsArena).tryAlloc (1 samples, 0.38%)</title><rect x="227.8" y="277" width="4.6" height="15.0" fill="rgb(241,49,7)" rx="2" ry="2" />
<text  x="230.85" y="287.5" ></text>
</g>
<g >
<title>runtime.semawakeup (9 samples, 3.46%)</title><rect x="627.2" y="229" width="40.9" height="15.0" fill="rgb(230,36,39)" rx="2" ry="2" />
<text  x="630.23" y="239.5" >run..</text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.38%)</title><rect x="173.4" y="149" width="4.5" height="15.0" fill="rgb(247,14,49)" rx="2" ry="2" />
<text  x="176.38" y="159.5" ></text>
</g>
<g >
<title>runtime.notewakeup (9 samples, 3.46%)</title><rect x="550.1" y="245" width="40.8" height="15.0" fill="rgb(237,225,12)" rx="2" ry="2" />
<text  x="553.08" y="255.5" >run..</text>
</g>
<g >
<title>syscall.syscall (1 samples, 0.38%)</title><rect x="10.0" y="197" width="4.5" height="15.0" fill="rgb(218,66,7)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (1 samples, 0.38%)</title><rect x="663.5" y="213" width="4.6" height="15.0" fill="rgb(213,149,54)" rx="2" ry="2" />
<text  x="666.54" y="223.5" ></text>
</g>
<g >
<title>runtime.bgscavenge.func1 (1 samples, 0.38%)</title><rect x="1135.5" y="325" width="4.6" height="15.0" fill="rgb(240,45,35)" rx="2" ry="2" />
<text  x="1138.54" y="335.5" ></text>
</g>
<g >
<title>runtime.getStackMap (1 samples, 0.38%)</title><rect x="241.5" y="165" width="4.5" height="15.0" fill="rgb(248,192,13)" rx="2" ry="2" />
<text  x="244.46" y="175.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.38%)</title><rect x="1131.0" y="261" width="4.5" height="15.0" fill="rgb(225,60,46)" rx="2" ry="2" />
<text  x="1134.00" y="271.5" ></text>
</g>
<g >
<title>runtime.stopm (2 samples, 0.77%)</title><rect x="595.5" y="245" width="9.0" height="15.0" fill="rgb(231,222,38)" rx="2" ry="2" />
<text  x="598.46" y="255.5" ></text>
</g>
<g >
<title>runtime.scang (1 samples, 0.38%)</title><rect x="241.5" y="245" width="4.5" height="15.0" fill="rgb(218,20,28)" rx="2" ry="2" />
<text  x="244.46" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mTreap).rotateLeft (1 samples, 0.38%)</title><rect x="209.7" y="149" width="4.5" height="15.0" fill="rgb(212,217,24)" rx="2" ry="2" />
<text  x="212.69" y="159.5" ></text>
</g>
<g >
<title>net.(*netFD).Write (1 samples, 0.38%)</title><rect x="10.0" y="261" width="4.5" height="15.0" fill="rgb(220,110,9)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>all (260 samples, 100%)</title><rect x="10.0" y="357" width="1180.0" height="15.0" fill="rgb(226,182,12)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>runtime.(*mspan).scavenge (3 samples, 1.15%)</title><rect x="754.3" y="277" width="13.6" height="15.0" fill="rgb(224,109,54)" rx="2" ry="2" />
<text  x="757.31" y="287.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.38%)</title><rect x="177.9" y="149" width="4.6" height="15.0" fill="rgb(225,116,43)" rx="2" ry="2" />
<text  x="180.92" y="159.5" ></text>
</g>
<g >
<title>runtime.sweepone (4 samples, 1.54%)</title><rect x="155.2" y="149" width="18.2" height="15.0" fill="rgb(249,223,49)" rx="2" ry="2" />
<text  x="158.23" y="159.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (10 samples, 3.85%)</title><rect x="767.9" y="261" width="45.4" height="15.0" fill="rgb(214,217,5)" rx="2" ry="2" />
<text  x="770.92" y="271.5" >runt..</text>
</g>
<g >
<title>runtime.mallocgc (17 samples, 6.54%)</title><rect x="109.8" y="229" width="77.2" height="15.0" fill="rgb(230,19,54)" rx="2" ry="2" />
<text  x="112.85" y="239.5" >runtime...</text>
</g>
<g >
<title>runtime.schedule (74 samples, 28.46%)</title><rect x="259.6" y="309" width="335.9" height="15.0" fill="rgb(237,184,7)" rx="2" ry="2" />
<text  x="262.62" y="319.5" >runtime.schedule</text>
</g>
<g >
<title>runtime.acquirep (1 samples, 0.38%)</title><rect x="618.2" y="229" width="4.5" height="15.0" fill="rgb(236,48,12)" rx="2" ry="2" />
<text  x="621.15" y="239.5" ></text>
</g>
<g >
<title>runtime.notewakeup (3 samples, 1.15%)</title><rect x="668.1" y="229" width="13.6" height="15.0" fill="rgb(249,50,47)" rx="2" ry="2" />
<text  x="671.08" y="239.5" ></text>
</g>
<g >
<title>runtime.wakep (9 samples, 3.46%)</title><rect x="550.1" y="277" width="40.8" height="15.0" fill="rgb(213,52,20)" rx="2" ry="2" />
<text  x="553.08" y="287.5" >run..</text>
</g>
<g >
<title>runtime.lock (4 samples, 1.54%)</title><rect x="155.2" y="53" width="18.2" height="15.0" fill="rgb(211,90,17)" rx="2" ry="2" />
<text  x="158.23" y="63.5" ></text>
</g>
<g >
<title>runtime.(*gcBitsArena).tryAlloc (1 samples, 0.38%)</title><rect x="150.7" y="101" width="4.5" height="15.0" fill="rgb(230,117,27)" rx="2" ry="2" />
<text  x="153.69" y="111.5" ></text>
</g>
<g >
<title>runtime.stopm (2 samples, 0.77%)</title><rect x="618.2" y="245" width="9.0" height="15.0" fill="rgb(245,75,10)" rx="2" ry="2" />
<text  x="621.15" y="255.5" ></text>
</g>
<g >
<title>runtime.deductSweepCredit (4 samples, 1.54%)</title><rect x="155.2" y="165" width="18.2" height="15.0" fill="rgb(247,66,14)" rx="2" ry="2" />
<text  x="158.23" y="175.5" ></text>
</g>
<g >
<title>runtime.ready (1 samples, 0.38%)</title><rect x="1135.5" y="293" width="4.6" height="15.0" fill="rgb(211,51,1)" rx="2" ry="2" />
<text  x="1138.54" y="303.5" ></text>
</g>
<g >
<title>runtime.semasleep (3 samples, 1.15%)</title><rect x="708.9" y="261" width="13.6" height="15.0" fill="rgb(216,174,28)" rx="2" ry="2" />
<text  x="711.92" y="271.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (1 samples, 0.38%)</title><rect x="1131.0" y="245" width="4.5" height="15.0" fill="rgb(205,169,19)" rx="2" ry="2" />
<text  x="1134.00" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan.func1 (4 samples, 1.54%)</title><rect x="209.7" y="245" width="18.1" height="15.0" fill="rgb(223,133,27)" rx="2" ry="2" />
<text  x="212.69" y="255.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.38%)</title><rect x="1135.5" y="261" width="4.6" height="15.0" fill="rgb(248,7,35)" rx="2" ry="2" />
<text  x="1138.54" y="271.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.38%)</title><rect x="1135.5" y="245" width="4.6" height="15.0" fill="rgb(239,193,5)" rx="2" ry="2" />
<text  x="1138.54" y="255.5" ></text>
</g>
<g >
<title>runtime.semasleep (9 samples, 3.46%)</title><rect x="1149.2" y="293" width="40.8" height="15.0" fill="rgb(217,115,47)" rx="2" ry="2" />
<text  x="1152.15" y="303.5" >run..</text>
</g>
<g >
<title>runtime.(*mcentral).freeSpan (4 samples, 1.54%)</title><rect x="209.7" y="293" width="18.1" height="15.0" fill="rgb(248,49,26)" rx="2" ry="2" />
<text  x="212.69" y="303.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (1 samples, 0.38%)</title><rect x="241.5" y="261" width="4.5" height="15.0" fill="rgb(236,9,1)" rx="2" ry="2" />
<text  x="244.46" y="271.5" ></text>
</g>
<g >
<title>runtime.mstart (100 samples, 38.46%)</title><rect x="681.7" y="341" width="453.8" height="15.0" fill="rgb(222,58,30)" rx="2" ry="2" />
<text  x="684.69" y="351.5" >runtime.mstart</text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.38%)</title><rect x="1135.5" y="213" width="4.6" height="15.0" fill="rgb(222,68,44)" rx="2" ry="2" />
<text  x="1138.54" y="223.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.38%)</title><rect x="182.5" y="213" width="4.5" height="15.0" fill="rgb(211,174,10)" rx="2" ry="2" />
<text  x="185.46" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mcache).releaseAll (1 samples, 0.38%)</title><rect x="618.2" y="197" width="4.5" height="15.0" fill="rgb(213,142,9)" rx="2" ry="2" />
<text  x="621.15" y="207.5" ></text>
</g>
<g >
<title>runtime.newstack (19 samples, 7.31%)</title><rect x="595.5" y="325" width="86.2" height="15.0" fill="rgb(208,196,5)" rx="2" ry="2" />
<text  x="598.46" y="335.5" >runtime.ne..</text>
</g>
<g >
<title>runtime.nanotime (5 samples, 1.92%)</title><rect x="681.7" y="293" width="22.7" height="15.0" fill="rgb(242,22,50)" rx="2" ry="2" />
<text  x="684.69" y="303.5" >r..</text>
</g>
<g >
<title>runtime.(*mTreap).removeSpan (2 samples, 0.77%)</title><rect x="209.7" y="181" width="9.1" height="15.0" fill="rgb(220,165,39)" rx="2" ry="2" />
<text  x="212.69" y="191.5" ></text>
</g>
<g >
<title>runtime.startm (3 samples, 1.15%)</title><rect x="668.1" y="245" width="13.6" height="15.0" fill="rgb(250,172,15)" rx="2" ry="2" />
<text  x="671.08" y="255.5" ></text>
</g>
<g >
<title>runtime.usleep (3 samples, 1.15%)</title><rect x="722.5" y="293" width="13.7" height="15.0" fill="rgb(249,19,29)" rx="2" ry="2" />
<text  x="725.54" y="303.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.38%)</title><rect x="1126.5" y="261" width="4.5" height="15.0" fill="rgb(213,193,20)" rx="2" ry="2" />
<text  x="1129.46" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mspan).sweep (4 samples, 1.54%)</title><rect x="155.2" y="133" width="18.2" height="15.0" fill="rgb(251,185,13)" rx="2" ry="2" />
<text  x="158.23" y="143.5" ></text>
</g>
<g >
<title>runtime.bgscavenge.func2 (3 samples, 1.15%)</title><rect x="754.3" y="309" width="13.6" height="15.0" fill="rgb(209,20,35)" rx="2" ry="2" />
<text  x="757.31" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mspan).treapFilter (1 samples, 0.38%)</title><rect x="209.7" y="117" width="4.5" height="15.0" fill="rgb(242,138,25)" rx="2" ry="2" />
<text  x="212.69" y="127.5" ></text>
</g>
<g >
<title>net/http.(*ServeMux).ServeHTTP (38 samples, 14.62%)</title><rect x="14.5" y="309" width="172.5" height="15.0" fill="rgb(228,5,12)" rx="2" ry="2" />
<text  x="17.54" y="319.5" >net/http.(*ServeMux).S..</text>
</g>
<g >
<title>runtime.markroot (1 samples, 0.38%)</title><rect x="241.5" y="277" width="4.5" height="15.0" fill="rgb(245,95,34)" rx="2" ry="2" />
<text  x="244.46" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (9 samples, 3.46%)</title><rect x="1149.2" y="277" width="40.8" height="15.0" fill="rgb(207,186,2)" rx="2" ry="2" />
<text  x="1152.15" y="287.5" >run..</text>
</g>
<g >
<title>runtime.wakep (1 samples, 0.38%)</title><rect x="590.9" y="293" width="4.6" height="15.0" fill="rgb(219,175,45)" rx="2" ry="2" />
<text  x="593.92" y="303.5" ></text>
</g>
<g >
<title>runtime.park_m (74 samples, 28.46%)</title><rect x="259.6" y="325" width="335.9" height="15.0" fill="rgb(213,65,4)" rx="2" ry="2" />
<text  x="262.62" y="335.5" >runtime.park_m</text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.38%)</title><rect x="177.9" y="165" width="4.6" height="15.0" fill="rgb(235,186,27)" rx="2" ry="2" />
<text  x="180.92" y="175.5" ></text>
</g>
<g >
<title>runtime.notetsleep (1 samples, 0.38%)</title><rect x="1131.0" y="293" width="4.5" height="15.0" fill="rgb(253,226,12)" rx="2" ry="2" />
<text  x="1134.00" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mTreap).removeNode (2 samples, 0.77%)</title><rect x="209.7" y="165" width="9.1" height="15.0" fill="rgb(224,95,35)" rx="2" ry="2" />
<text  x="212.69" y="175.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (10 samples, 3.85%)</title><rect x="767.9" y="309" width="45.4" height="15.0" fill="rgb(218,31,17)" rx="2" ry="2" />
<text  x="770.92" y="319.5" >runt..</text>
</g>
<g >
<title>runtime.mstart1 (12 samples, 4.62%)</title><rect x="681.7" y="325" width="54.5" height="15.0" fill="rgb(238,219,49)" rx="2" ry="2" />
<text  x="684.69" y="335.5" >runti..</text>
</g>
<g >
<title>runtime.notetsleepg (11 samples, 4.23%)</title><rect x="1140.1" y="325" width="49.9" height="15.0" fill="rgb(221,22,37)" rx="2" ry="2" />
<text  x="1143.08" y="335.5" >runti..</text>
</g>
<g >
<title>runtime.nanotime (2 samples, 0.77%)</title><rect x="1140.1" y="293" width="9.1" height="15.0" fill="rgb(239,189,47)" rx="2" ry="2" />
<text  x="1143.08" y="303.5" ></text>
</g>
<g >
<title>runtime.notetsleep (4 samples, 1.54%)</title><rect x="704.4" y="293" width="18.1" height="15.0" fill="rgb(224,132,47)" rx="2" ry="2" />
<text  x="707.38" y="303.5" ></text>
</g>
<g >
<title>main.GetFibonacciSeries (38 samples, 14.62%)</title><rect x="14.5" y="261" width="172.5" height="15.0" fill="rgb(232,84,32)" rx="2" ry="2" />
<text  x="17.54" y="271.5" >main.GetFibonacciSeries</text>
</g>
<g >
<title>runtime.semawakeup (9 samples, 3.46%)</title><rect x="550.1" y="229" width="40.8" height="15.0" fill="rgb(220,30,12)" rx="2" ry="2" />
<text  x="553.08" y="239.5" >run..</text>
</g>
<g >
<title>runtime.gcStart.func2 (69 samples, 26.54%)</title><rect x="813.3" y="309" width="313.2" height="15.0" fill="rgb(209,102,0)" rx="2" ry="2" />
<text  x="816.31" y="319.5" >runtime.gcStart.func2</text>
</g>
<g >
<title>runtime.sysUsed (4 samples, 1.54%)</title><rect x="736.2" y="261" width="18.1" height="15.0" fill="rgb(250,35,20)" rx="2" ry="2" />
<text  x="739.15" y="271.5" ></text>
</g>
<g >
<title>runtime.pcvalue (1 samples, 0.38%)</title><rect x="241.5" y="133" width="4.5" height="15.0" fill="rgb(238,71,12)" rx="2" ry="2" />
<text  x="244.46" y="143.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (64 samples, 24.62%)</title><rect x="259.6" y="229" width="290.5" height="15.0" fill="rgb(230,170,44)" rx="2" ry="2" />
<text  x="262.62" y="239.5" >runtime.pthread_cond_wait</text>
</g>
<g >
<title>runtime.gcDrain (5 samples, 1.92%)</title><rect x="236.9" y="293" width="22.7" height="15.0" fill="rgb(224,120,15)" rx="2" ry="2" />
<text  x="239.92" y="303.5" >r..</text>
</g>
<g >
<title>runtime.madvise (3 samples, 1.15%)</title><rect x="754.3" y="245" width="13.6" height="15.0" fill="rgb(242,24,34)" rx="2" ry="2" />
<text  x="757.31" y="255.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.38%)</title><rect x="622.7" y="213" width="4.5" height="15.0" fill="rgb(205,8,21)" rx="2" ry="2" />
<text  x="625.69" y="223.5" ></text>
</g>
</g>
</svg>
